/*
 * HmPHPSimpleDaemon v0.8.1.0
 *
 * Copyright (c) 2023 Akitsugu Komiyama
 * under the MIT License
 */



PHP_SERVER_SETTING:

    // 手元にある php.exe へのフルパスを指定。
    // PCに入っていなければ、「https://windows.php.net/download」の「Zip」とあるものならどれでもOK (少々古いPHPでも問題はない)
    $PHP_FULLPATH = @"C:\usr\php\php.exe";

    // localhost に相当するものは、秀丸のURLからjavascript:(～)が実行可能です。
    $PHP_HOSTNAME = @"localhost";
    #TARGET_BROWSER_PANE = 2; // 個別ブラウザ枠:2  共用ブラウザ枠:1   ※使用用途から考えて、原則的には個別ブラウザ枠を強く推奨。

    $PHP_DOCUMENTROOT = getarg(0); // PHPサーバーのドキュメントルート。空白なら「秀丸で開いているファイルのフォルダー」がドキュメントルート。
                                   // 通常はこのまま空白でOK。このマクロに対して引数として渡すことが出来る。
                                   // 「execmacroで引数付き」やブックマークの「mac:"****\\HmPHPSimpleDaemon.mac" "C:\test"」といったように使用することが出来る。

CLEAR_OLD_PHP_SERVER_OBJECT:

    // 「この秀丸プロセス」内でのオブジェクト番号を取り出す
    $LAST_PHP_OBJ = getstaticvariable("HmPHPSimpleDaemonLastObj", 2);

    // 有効な値があるならば...
    if ($LAST_PHP_OBJ != "") {
        #LAST_PHP_OBJ = val($LAST_PHP_OBJ); // 文字列の数字 ⇒ 数値へ

        // 該当の値をToStringして本当に「HmPHPSimpleDaemon」のオブジェクトか確認する。
        // .NET で制作しているものはすべてのオブジェクトがToStringを持つ、それは「名前空間.クラス名」なのでこのような判定が出来る。
        $OBJ_CLASS_NAME = member(#LAST_PHP_OBJ, "ToString");
        if ($OBJ_CLASS_NAME == "HmPHPSimpleDaemon.HmPHPSimpleDaemon") {
            releaseobject(#PHP_OBJ_INDEX); // HmPHPSimpleDaemon.HmPHPSimpleDaemon 内の「OnReleaseObject」も実行される。
        }
    }


UNTITLED_EXIT:
    if (filename2 == "") {
        endmacro;
    }



CREATE_PHP_SERVER_OBJECT:

    #PHP_OBJ = createobject( currentmacrodirectory + @"\HmPHPSimpleDaemon.dll", "HmPHPSimpleDaemon.HmPHPSimpleDaemon");

    // 「この秀丸プロセス」内でのオブジェクト番号を記憶しておく
    setstaticvariable "HmPHPSimpleDaemonLastObj", str(#PHP_OBJ), 2; // 

    // マクロが終了してもオブジェクトは維持。シングルトンにするため、マクロの「CLEAR_OLD_PHP_SERVER_OBJECT:」で古い起動は掃除している。
    keepobject #PHP_OBJ, 1;

    // 掃除される際(releaseobjectやプロセスを閉じた、何か秀丸レベルで致命的マクロエラーとなった際)に呼び出される
    setcomdetachmethod #PHP_OBJ, "OnReleaseObject";



CREATE_PHP_SERVER_UNIQUE_PORT:

    #BGN_PORT = 50001;
    #END_PORT = 50300;

     // 全秀丸共有で#PHP_HOSTPORTを持つ。１つずつインクリメントで「全秀丸プロセス」でユニークとし、まずは被りにくいようにする
    $STR_PORT = getstaticvariable("HmPHPSimpleDaemonLastPort", 1);
    if ($STR_PORT == "") {
        #PHP_HOSTPORT = #BGN_PORT;

        // 被りにくい番号～ #END_PORTの範囲で、「本当に使われていない」Port番号を探す
        call GET_AVILABLE_PORT #PHP_HOSTPORT, #END_PORT;
        #PHP_HOSTPORT = ##return;

        setstaticvariable "HmPHPSimpleDaemonLastPort", str(#PHP_HOSTPORT), 1;
    } else {
        #PHP_HOSTPORT = val($STR_PORT);
        #PHP_HOSTPORT = #PHP_HOSTPORT + 1;
        if (#PHP_HOSTPORT > #END_PORT) {
            #PHP_HOSTPORT = #BGN_PORT;
        }
        if (#PHP_HOSTPORT < #BGN_PORT) {
            #PHP_HOSTPORT = #BGN_PORT;
        }

        // 被りにくい番号～ #END_PORTの範囲で、「本当に使われていない」Port番号を探す
        call GET_AVILABLE_PORT #PHP_HOSTPORT, #END_PORT;
        #PHP_HOSTPORT = ##return;

        setstaticvariable "HmPHPSimpleDaemonLastPort", str(#PHP_HOSTPORT), 1;
    }

    // 各種情報を基に、PHPを簡易サーバーとして起動
    $URI = member(#PHP_OBJ, "Launch", $PHP_FULLPATH, $PHP_HOSTNAME, #PHP_HOSTPORT, $PHP_DOCUMENTROOT);



SHOW_BROWSER_PANE_BY_HTTP_URL:

    // ブラウザ枠で表示
    showbrowserpane 1, #TARGET_BROWSER_PANE;
    // 対応するポートでPHPサーバーが立っているので、そのURLをブラウザ枠に表示。
    setbrowserpaneurl "http://" + $PHP_HOSTNAME + ":" + str(#PHP_HOSTPORT) + "/" + $URI, #TARGET_BROWSER_PANE;

    endmacro;


GET_AVILABLE_PORT:
    #PORT_OBJ = createobject( currentmacrodirectory + @"\HmPHPSimpleDaemon.dll", "HmPHPSimpleDaemon.HmUsedPortChecker");
    #AVAILABLE_PORT = member(#PORT_OBJ, "GetAvailablePort", ##1, ##2); // この範囲で空いているポートで最初の番号のものを取得

    if (#AVAILABLE_PORT == 0) {
        message("ポート番号に空きがありません。\n#BGN_PORT と #END_PORT の範囲を広げて下さい。");
        endmacro;
    }
    return #AVAILABLE_PORT;
